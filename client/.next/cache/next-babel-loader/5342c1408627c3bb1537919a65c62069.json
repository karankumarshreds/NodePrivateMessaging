{"ast":null,"code":"var _jsxFileName = \"E:\\\\Linux\\\\socket-private-message\\\\client\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nlet socket;\nlet BACKEND_URI = 'http://localhost:3001';\n\nconst index = () => {\n  const {\n    0: message,\n    1: setMessage\n  } = useState(''); // connect to the backend when page loads \n\n  useEffect(() => {\n    // connect to the backend uri using socket \n    socket = io(BACKEND_URI);\n    socket.emit('join', {\n      name: 'Karan'\n    }, ({\n      error\n    }) => {\n      console.log(error);\n    }); // disconnect when component unmounts\n\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n      console.log('Disconnecting the room');\n    };\n  }, []); // function to send the message\n\n  const sendMessage = e => {\n    e.preventDefault();\n    console.log(message);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Socket io private messaging\"), __jsx(\"form\", {\n    onSubmit: e => sendMessage(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    placeholder: \"Type message\",\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Send message\")));\n};\n\nexport default index;","map":{"version":3,"sources":["E:/Linux/socket-private-message/client/pages/index.js"],"names":["React","useEffect","useState","io","socket","BACKEND_URI","index","message","setMessage","emit","name","error","console","log","off","sendMessage","e","preventDefault","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;AACA,IAAIC,WAAW,GAAG,uBAAlB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,EAAD,CAAtC,CADkB,CAElB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAG,IAAAA,MAAM,GAAGD,EAAE,CAACE,WAAD,CAAX;AACAD,IAAAA,MAAM,CAACK,IAAP,CAAY,MAAZ,EAAoB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAApB,EAAuC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAe;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAFD,EAHc,CAMd;;AACA,WAAO,MAAM;AACXP,MAAAA,MAAM,CAACK,IAAP,CAAY,YAAZ;AACAL,MAAAA,MAAM,CAACU,GAAP;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,KAJD;AAKD,GAZQ,EAYN,EAZM,CAAT,CAHkB,CAgBlB;;AACA,QAAME,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACD,GAHD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAM,IAAA,QAAQ,EAAES,CAAC,IAAID,WAAW,CAACC,CAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,cAAnB;AACE,IAAA,KAAK,EAAET,OADT;AAEE,IAAA,QAAQ,EAAES,CAAC,IAAIR,UAAU,CAACQ,CAAC,CAACE,MAAF,CAASC,KAAV,CAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,CAFF,CADF;AAYD,CAjCD;;AAmCA,eAAeb,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nlet socket;\r\nlet BACKEND_URI = 'http://localhost:3001';\r\n\r\nconst index = () => {\r\n  const [message, setMessage] = useState('');\r\n  // connect to the backend when page loads \r\n  useEffect(() => {\r\n    // connect to the backend uri using socket \r\n    socket = io(BACKEND_URI);\r\n    socket.emit('join', { name: 'Karan' }, ({ error }) => {\r\n      console.log(error);\r\n    });\r\n    // disconnect when component unmounts\r\n    return () => {\r\n      socket.emit('disconnect');\r\n      socket.off();\r\n      console.log('Disconnecting the room');\r\n    }\r\n  }, []);\r\n  // function to send the message\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log(message);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>Socket io private messaging</h1>\r\n      <form onSubmit={e => sendMessage(e)}>\r\n        <input placeholder=\"Type message\"\r\n          value={message}\r\n          onChange={e => setMessage(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send message</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default index;"]},"metadata":{},"sourceType":"module"}